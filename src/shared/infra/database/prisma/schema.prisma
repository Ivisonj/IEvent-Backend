// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid()) @db.Uuid
  name          String
  email         String  @unique @db.VarChar(50)
  password      String
  events        Event[] 
  participant   Participant[]
  notification  Notification[]
  attendance    Attendance[]
}

model Event {
  id                 String     @id @default(uuid()) @db.Uuid
  userId             String     @db.Uuid
  name               String
  address            String
  isPublic           Boolean
  once               Boolean
  isActive           Boolean
  custom_rules       Boolean
  absences_limit     Boolean
  max_absences       Int
  delays_limit       Boolean
  max_delays         Int
  start_date         DateTime
  end_date           DateTime
  start_time         DateTime
  end_time           DateTime
  user               User       @relation(fields: [userId], references: [id]) 
  recurrence         Recurrence[]
  participant        Participant[]
  notification       Notification[] 
  registerEvents    Register_Events[]
  attendance         Attendance[] 
}

model Recurrence {
  id         String  @id @default(uuid()) @db.Uuid
  eventId    String  @db.Uuid
  day        Int
  event      Event   @relation(fields: [eventId], references: [id]) 
}

model Participant {
  id         String  @id @default(uuid()) @db.Uuid
  userId     String  @db.Uuid
  eventId    String  @db.Uuid
  status     String  @default("pending")
  user       User    @relation(fields: [userId], references: [id])
  event      Event   @relation(fields: [eventId], references: [id]) 
}

model Notification {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  eventId    String   @db.Uuid
  message    String?
  type       String
  createdAt  DateTime @default(now())
  readed     Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id])
  event      Event    @relation(fields: [eventId], references: [id]) 
}

model Register_Events {
  id          String   @id @default(uuid()) @db.Uuid
  eventId     String   @db.Uuid
  date        DateTime
  start_time  DateTime
  end_time    DateTime?   
  event       Event    @relation(fields: [eventId], references: [id])
  attendance  Attendance[]   
}

model Attendance {
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @db.Uuid
  eventId            String   @db.Uuid
  registerEventsId   String   @db.Uuid
  checkedInAt        DateTime
  status             String      
  user               User     @relation(fields: [userId], references: [id])    
  event              Event    @relation(fields: [eventId], references: [id])    
  registerEvents    Register_Events @relation(fields: [registerEventsId], references: [id])    
}
